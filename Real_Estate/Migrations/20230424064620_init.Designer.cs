// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Real_Estate.Data;

#nullable disable

namespace Real_Estate.Migrations
{
    [DbContext(typeof(RealEDbContext))]
    [Migration("20230424064620_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EstatePropertyPropertyListViewModel", b =>
                {
                    b.Property<int>("PropertiesId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyListViewsId")
                        .HasColumnType("int");

                    b.HasKey("PropertiesId", "PropertyListViewsId");

                    b.HasIndex("PropertyListViewsId");

                    b.ToTable("EstatePropertyPropertyListViewModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fb63abec-98f5-448e-8f56-302fafd16df4",
                            ConcurrencyStamp = "337a6f8c-4aa4-413a-b8a7-7ea2bf180a01",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5c965850-234a-4d90-9c24-024ebfac6f20",
                            ConcurrencyStamp = "dd2e4960-b8de-442f-8d86-fe56c53062a0",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "51d0771e-de96-4882-a01e-8f0b9949e90c",
                            ConcurrencyStamp = "3ece8711-c74c-4609-b868-6bcd4bff56ee",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f0fbf9f0-eb17-4c87-9c76-9de5451f74ae",
                            RoleId = "fb63abec-98f5-448e-8f56-302fafd16df4"
                        },
                        new
                        {
                            UserId = "b93130a7-a14b-46d0-b00d-f23536494dd2",
                            RoleId = "5c965850-234a-4d90-9c24-024ebfac6f20"
                        },
                        new
                        {
                            UserId = "e1e3dc24-4d24-4468-b2db-017de922c7a6",
                            RoleId = "5c965850-234a-4d90-9c24-024ebfac6f20"
                        },
                        new
                        {
                            UserId = "62550723-3df6-4886-80c0-5ff90804ec07",
                            RoleId = "51d0771e-de96-4882-a01e-8f0b9949e90c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PropertyCategoryPropertyListViewModel", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyListViewsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "PropertyListViewsId");

                    b.HasIndex("PropertyListViewsId");

                    b.ToTable("PropertyCategoryPropertyListViewModel");
                });

            modelBuilder.Entity("Real_Estate.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UrlImages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Zoomlink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f0fbf9f0-eb17-4c87-9c76-9de5451f74ae",
                            AccessFailedCount = 0,
                            Address = "Laguna",
                            Age = 23,
                            ConcurrencyStamp = "89a2a415-bafc-4244-be05-df79570fb8d4",
                            DOB = new DateTime(2023, 4, 24, 14, 46, 20, 471, DateTimeKind.Local).AddTicks(6653),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB5sD3zxFx2DbTLeB9QLcgxJKv5VFJHt1EiTX8S1xZduJVvCOIDFKLnTKj1RsH4/3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ecfb9ec7-74cc-467f-98d0-c582852e3bba",
                            TwoFactorEnabled = false,
                            UrlImages = "https://live.staticflickr.com/65535/52837724066_4d882431b9_w.jpg",
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "b93130a7-a14b-46d0-b00d-f23536494dd2",
                            AccessFailedCount = 0,
                            Address = "Laguna",
                            Age = 23,
                            ConcurrencyStamp = "02d1f533-357d-43a4-88ea-b4ac75996d7d",
                            DOB = new DateTime(2023, 4, 24, 14, 46, 20, 472, DateTimeKind.Local).AddTicks(8890),
                            Email = "client1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Client One",
                            NormalizedEmail = "CLIENT1@GMAIL.COM",
                            NormalizedUserName = "CLIENT1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ2N3jTtudUAGv61x2FydETigCz3aV3CGUtJygzAbgGUcHyy5UL0VhGg/bwQWbs6rQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "747e9152-6f8b-4399-9261-834e7d9c5938",
                            TwoFactorEnabled = false,
                            UrlImages = "https://live.staticflickr.com/65535/52837907994_47a8b89ac4_n.jpg",
                            UserName = "client1@gmail.com"
                        },
                        new
                        {
                            Id = "e1e3dc24-4d24-4468-b2db-017de922c7a6",
                            AccessFailedCount = 0,
                            Address = "Laguna",
                            Age = 23,
                            ConcurrencyStamp = "1c6b7e5b-c76e-4e4c-b22f-d12898c55c0b",
                            DOB = new DateTime(2023, 4, 24, 14, 46, 20, 474, DateTimeKind.Local).AddTicks(836),
                            Email = "client2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Client Two",
                            NormalizedEmail = "CLIENT2@GMAIL.COM",
                            NormalizedUserName = "CLIENT2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMqKgJ/PcaVBPxw5ce0qtiY35wH4r2DCW3fCyIZkn0+z8yWGp3GJxqfEcvbLJTogfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d62b15e-5fe1-4ed0-a40a-cf282b26b625",
                            TwoFactorEnabled = false,
                            UrlImages = "https://live.staticflickr.com/65535/52837908254_3c81ba99c7_n.jpg",
                            UserName = "client2@gmail.com"
                        },
                        new
                        {
                            Id = "62550723-3df6-4886-80c0-5ff90804ec07",
                            AccessFailedCount = 0,
                            Address = "Laguna",
                            Age = 23,
                            ConcurrencyStamp = "cc09212a-80b4-4eef-832e-e372a42cd09f",
                            DOB = new DateTime(2023, 4, 24, 14, 46, 20, 475, DateTimeKind.Local).AddTicks(2742),
                            Email = "owner@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Owner",
                            NormalizedEmail = "OWNER@GMAIL.COM",
                            NormalizedUserName = "OWNER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECsOF13P61ACh7mSQ6JjPhjOOmRTeuQYUHKV5+OPkiEdl2VPJkS6VKeAZdG7RCxwOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5e37edd3-9844-4aee-b196-10b21ff9da77",
                            TwoFactorEnabled = false,
                            UrlImages = "https://live.staticflickr.com/65535/52837723986_d9afeb97e0_w.jpg",
                            UserName = "owner@gmail.com",
                            Zoomlink = "https://us05web.zoom.us/j/82148537267?pwd=NjlYUWQzeFF6K1AxZEZRaklxbnF6QT09"
                        });
                });

            modelBuilder.Entity("Real_Estate.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstatePropertyId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("OwnersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClientsId");

                    b.HasIndex("EstatePropertyId");

                    b.HasIndex("OwnerScheduleId");

                    b.HasIndex("OwnersId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Real_Estate.Models.EstateProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("PropertyCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleOrRentModelId")
                        .HasColumnType("int");

                    b.Property<string>("UrlImages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PropertyCategoryId");

                    b.HasIndex("SaleOrRentModelId");

                    b.ToTable("EstateProperties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "GAMU - ROXAS HIGHWAY, DISTRICT II, GAMU",
                            ApplicationUserId = "62550723-3df6-4886-80c0-5ff90804ec07",
                            Description = "Gregoria Model (2-Storey Single Attached)\r\n\r\nUnit Price: Php 3,173,851.00\r\n\r\nNo. of Bedroom: 3\r\n\r\nNo. of Bathroom: 2\r\n\r\nLot Area: 110 sqm\r\n\r\nFloor Area: 72 sqm\r\n\r\n\r\n\r\nHEROES' LANE\r\n\r\nA mix-used horizontal development with a total of 668 units which is eyed to be the 1st EDGE Certified Green Project in Cagayan Valley and North Luzon.\r\n\r\n\r\n\r\nAmenities\r\n\r\nCommunity Function Hall\r\nReligious Chapel\r\nSolar Powered Units and Facilities\r\nBasketball and Tennis Courts\r\nHeroes Park\r\nChildren's Playground\r\nCommercial Lane\r\nGardens and Open Spaces\r\n\r\n\r\nLocation\r\n\r\nGamu - Roxas Highway, District 2, Gamu, Isabela, PH\r\n\r\n\r\n\r\nHLURB LTS No. CR # 021 / LTS # 038 / 039 / 040\r\n\r\nYear Built: 2022\r\n\r\nTurnover Date: 2024 - 2025\r\n\r\nTotal No. of Model Units: 7",
                            Name = "GREGORIA",
                            OwnerName = "Owner",
                            Price = 3173851.0,
                            PropertyCategoryId = 1,
                            SaleOrRentModelId = 1,
                            UrlImages = "https://live.staticflickr.com/65535/52838168898_681cda2416_z.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Address = "OUANO AVE. COR. F.E. ZUELLIG AVE. SUBANGDAKU, MANDAUE",
                            ApplicationUserId = "62550723-3df6-4886-80c0-5ff90804ec07",
                            Description = "Mantawi Residences proudly calls Ouano Avenue, Mandaue City, Cebu its home, a prime spot where everything you need is within reach. With a multitude of infrastructure and development plans in the pipeline, this location is set to transform into a progressive district where you can reap the benefits of living at the center of everything. Take charge of your future with Mantawi Residences’ units equipped with upgraded smart home devices* so you can easily manage your home life without worry.\r\n\r\n",
                            Name = "Mantawi Residences ",
                            OwnerName = "Owner",
                            Price = 37200000.0,
                            PropertyCategoryId = 2,
                            SaleOrRentModelId = 2,
                            UrlImages = "https://live.staticflickr.com/65535/52837908104_bac2f52f97_z.jpg"
                        });
                });

            modelBuilder.Entity("Real_Estate.Models.OwnerSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("endTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("startTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("OwnerSchedules");
                });

            modelBuilder.Entity("Real_Estate.Models.PropertyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A House.",
                            Name = "House"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A Condominium.",
                            Name = "Condominium"
                        });
                });

            modelBuilder.Entity("Real_Estate.Models.PropertyListViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("EstateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PropertyListViewModel");
                });

            modelBuilder.Entity("Real_Estate.Models.SaleorRentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SaleorRentModel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sale"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rent"
                        });
                });

            modelBuilder.Entity("EstatePropertyPropertyListViewModel", b =>
                {
                    b.HasOne("Real_Estate.Models.EstateProperty", null)
                        .WithMany()
                        .HasForeignKey("PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Real_Estate.Models.PropertyListViewModel", null)
                        .WithMany()
                        .HasForeignKey("PropertyListViewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Real_Estate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Real_Estate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Real_Estate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Real_Estate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PropertyCategoryPropertyListViewModel", b =>
                {
                    b.HasOne("Real_Estate.Models.PropertyCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Real_Estate.Models.PropertyListViewModel", null)
                        .WithMany()
                        .HasForeignKey("PropertyListViewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Real_Estate.Models.Appointment", b =>
                {
                    b.HasOne("Real_Estate.Models.ApplicationUser", "Clients")
                        .WithMany()
                        .HasForeignKey("ClientsId");

                    b.HasOne("Real_Estate.Models.EstateProperty", "EstateProperty")
                        .WithMany()
                        .HasForeignKey("EstatePropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Real_Estate.Models.OwnerSchedule", "OwnerSchedules")
                        .WithMany()
                        .HasForeignKey("OwnerScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Real_Estate.Models.ApplicationUser", "Owners")
                        .WithMany()
                        .HasForeignKey("OwnersId");

                    b.Navigation("Clients");

                    b.Navigation("EstateProperty");

                    b.Navigation("OwnerSchedules");

                    b.Navigation("Owners");
                });

            modelBuilder.Entity("Real_Estate.Models.EstateProperty", b =>
                {
                    b.HasOne("Real_Estate.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Properties")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Real_Estate.Models.PropertyCategory", "PropertyCategory")
                        .WithMany("EstateProperties")
                        .HasForeignKey("PropertyCategoryId");

                    b.HasOne("Real_Estate.Models.SaleorRentModel", "SaleOrRentModel")
                        .WithMany("EstateProperties")
                        .HasForeignKey("SaleOrRentModelId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("PropertyCategory");

                    b.Navigation("SaleOrRentModel");
                });

            modelBuilder.Entity("Real_Estate.Models.OwnerSchedule", b =>
                {
                    b.HasOne("Real_Estate.Models.ApplicationUser", "Owner")
                        .WithMany("OwnerScedules")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Real_Estate.Models.ApplicationUser", b =>
                {
                    b.Navigation("OwnerScedules");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Real_Estate.Models.PropertyCategory", b =>
                {
                    b.Navigation("EstateProperties");
                });

            modelBuilder.Entity("Real_Estate.Models.SaleorRentModel", b =>
                {
                    b.Navigation("EstateProperties");
                });
#pragma warning restore 612, 618
        }
    }
}
